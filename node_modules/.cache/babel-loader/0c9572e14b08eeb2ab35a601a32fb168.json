{"ast":null,"code":"import uuid from \"uuid\";\n\nwindow.helpers = function () {\n  function newTimer(attrs = {}) {\n    const timer = {\n      title: attrs.title || \"Timer\",\n      project: attrs.project || \"Project\",\n      id: uuid.v7(),\n      // eslint-disable-line no-undef\n      elapsed: 0\n    };\n    return timer;\n  }\n\n  function findById(array, id, cb) {\n    array.forEach(el => {\n      if (el.id === id) {\n        cb(el);\n        return;\n      }\n    });\n  }\n\n  function renderElapsedString(elapsed, runningSince) {\n    let totalElapsed = elapsed;\n\n    if (runningSince) {\n      totalElapsed += Date.now() - runningSince; //   console.log(\"totalElapsed\", totalElapsed);\n    } // console.log(\"toHumain\", millisecondsToHuman(totalElapsed));\n\n\n    return millisecondsToHuman(totalElapsed);\n  }\n\n  function millisecondsToHuman(ms) {\n    const seconds = Math.floor(ms / 1000 % 60);\n    const minutes = Math.floor(ms / 1000 / 60 % 60);\n    const hours = Math.floor(ms / 1000 / 60 / 60);\n    const humanized = [pad(hours.toString(), 2), pad(minutes.toString(), 2), pad(seconds.toString(), 2)].join(\":\");\n    return humanized;\n  }\n\n  function pad(numberString, size) {\n    let padded = numberString;\n\n    while (padded.length < size) padded = `0${padded}`;\n\n    return padded;\n  }\n\n  return {\n    millisecondsToHuman,\n    newTimer,\n    findById,\n    renderElapsedString\n  };\n}();","map":{"version":3,"sources":["/Users/hankoulrich/Desktop/Dev/react/learn react/muniteur/src/helpers.js"],"names":["uuid","window","helpers","newTimer","attrs","timer","title","project","id","v7","elapsed","findById","array","cb","forEach","el","renderElapsedString","runningSince","totalElapsed","Date","now","millisecondsToHuman","ms","seconds","Math","floor","minutes","hours","humanized","pad","toString","join","numberString","size","padded","length"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEAC,MAAM,CAACC,OAAP,GAAkB,YAAY;AAC5B,WAASC,QAAT,CAAkBC,KAAK,GAAG,EAA1B,EAA8B;AAC5B,UAAMC,KAAK,GAAG;AACZC,MAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,IAAe,OADV;AAEZC,MAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,IAAiB,SAFd;AAGZC,MAAAA,EAAE,EAAER,IAAI,CAACS,EAAL,EAHQ;AAGG;AACfC,MAAAA,OAAO,EAAE;AAJG,KAAd;AAOA,WAAOL,KAAP;AACD;;AAED,WAASM,QAAT,CAAkBC,KAAlB,EAAyBJ,EAAzB,EAA6BK,EAA7B,EAAiC;AAC/BD,IAAAA,KAAK,CAACE,OAAN,CAAeC,EAAD,IAAQ;AACpB,UAAIA,EAAE,CAACP,EAAH,KAAUA,EAAd,EAAkB;AAChBK,QAAAA,EAAE,CAACE,EAAD,CAAF;AACA;AACD;AACF,KALD;AAMD;;AAED,WAASC,mBAAT,CAA6BN,OAA7B,EAAsCO,YAAtC,EAAoD;AAClD,QAAIC,YAAY,GAAGR,OAAnB;;AACA,QAAIO,YAAJ,EAAkB;AAChBC,MAAAA,YAAY,IAAIC,IAAI,CAACC,GAAL,KAAaH,YAA7B,CADgB,CAEhB;AACD,KALiD,CAMlD;;;AACA,WAAOI,mBAAmB,CAACH,YAAD,CAA1B;AACD;;AAED,WAASG,mBAAT,CAA6BC,EAA7B,EAAiC;AAC/B,UAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYH,EAAE,GAAG,IAAN,GAAc,EAAzB,CAAhB;AACA,UAAMI,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAYH,EAAE,GAAG,IAAL,GAAY,EAAb,GAAmB,EAA9B,CAAhB;AACA,UAAMK,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAWH,EAAE,GAAG,IAAL,GAAY,EAAZ,GAAiB,EAA5B,CAAd;AAEA,UAAMM,SAAS,GAAG,CAChBC,GAAG,CAACF,KAAK,CAACG,QAAN,EAAD,EAAmB,CAAnB,CADa,EAEhBD,GAAG,CAACH,OAAO,CAACI,QAAR,EAAD,EAAqB,CAArB,CAFa,EAGhBD,GAAG,CAACN,OAAO,CAACO,QAAR,EAAD,EAAqB,CAArB,CAHa,EAIhBC,IAJgB,CAIX,GAJW,CAAlB;AAMA,WAAOH,SAAP;AACD;;AAED,WAASC,GAAT,CAAaG,YAAb,EAA2BC,IAA3B,EAAiC;AAC/B,QAAIC,MAAM,GAAGF,YAAb;;AACA,WAAOE,MAAM,CAACC,MAAP,GAAgBF,IAAvB,EAA6BC,MAAM,GAAI,IAAGA,MAAO,EAApB;;AAC7B,WAAOA,MAAP;AACD;;AAED,SAAO;AACLb,IAAAA,mBADK;AAELlB,IAAAA,QAFK;AAGLQ,IAAAA,QAHK;AAILK,IAAAA;AAJK,GAAP;AAMD,CAzDgB,EAAjB","sourcesContent":["import uuid from \"uuid\";\r\n\r\nwindow.helpers = (function () {\r\n  function newTimer(attrs = {}) {\r\n    const timer = {\r\n      title: attrs.title || \"Timer\",\r\n      project: attrs.project || \"Project\",\r\n      id: uuid.v7(), // eslint-disable-line no-undef\r\n      elapsed: 0,\r\n    };\r\n\r\n    return timer;\r\n  }\r\n\r\n  function findById(array, id, cb) {\r\n    array.forEach((el) => {\r\n      if (el.id === id) {\r\n        cb(el);\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  function renderElapsedString(elapsed, runningSince) {\r\n    let totalElapsed = elapsed;\r\n    if (runningSince) {\r\n      totalElapsed += Date.now() - runningSince;\r\n      //   console.log(\"totalElapsed\", totalElapsed);\r\n    }\r\n    // console.log(\"toHumain\", millisecondsToHuman(totalElapsed));\r\n    return millisecondsToHuman(totalElapsed);\r\n  }\r\n\r\n  function millisecondsToHuman(ms) {\r\n    const seconds = Math.floor((ms / 1000) % 60);\r\n    const minutes = Math.floor((ms / 1000 / 60) % 60);\r\n    const hours = Math.floor(ms / 1000 / 60 / 60);\r\n\r\n    const humanized = [\r\n      pad(hours.toString(), 2),\r\n      pad(minutes.toString(), 2),\r\n      pad(seconds.toString(), 2),\r\n    ].join(\":\");\r\n\r\n    return humanized;\r\n  }\r\n\r\n  function pad(numberString, size) {\r\n    let padded = numberString;\r\n    while (padded.length < size) padded = `0${padded}`;\r\n    return padded;\r\n  }\r\n\r\n  return {\r\n    millisecondsToHuman,\r\n    newTimer,\r\n    findById,\r\n    renderElapsedString,\r\n  };\r\n})();\r\n"]},"metadata":{},"sourceType":"module"}